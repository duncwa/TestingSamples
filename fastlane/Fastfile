#!/usr/bin/env ruby
#
#  Fastfile
#  TestingSamples
#  Created by Duncan Wallace 02/19/2022
#  Copyright Â© 2022. Duncwa LLC.  All rights reserved

require_relative "functions/readable_time"
require_relative "functions/nilerize"

default_platform(:android)

platform :android do

  ##################################################
  #  AOS DEV and RLS Lanes
  ##################################################

  desc "Upload RLS apk and mapping results to AppCenter"
  lane :appcenter_upload_rls do
    apk_file = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    aab_file = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    mapping_file = lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH]
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_RLS_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: apk_file,
      mapping: mapping_file,
      dsym: ENV["APPCENTER_DISTRIBUTE_DSYM"],
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "android",
      app_os: "android"
    )
  end

  desc "Upload DEV apk and mapping results to AppCenter"
  lane :appcenter_upload_dev do
    apk_file = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    aab_file = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_DEV_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: apk_file,
      dsym: ENV["APPCENTER_DISTRIBUTE_DSYM"],
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "android",
      app_os: "android"
    )
  end

  desc "Run Develop Build for TestingSamples Android App"
  lane :generate_dev do
    gradle(
      task: "assemble",
      build_type: "Debug",
      project_dir: 'ui/espresso/BasicSample'
    )
    gradle(
      task: "bundle",
      build_type: "Debug",
      project_dir: 'ui/espresso/BasicSample',
      print_command: false,
    )
  end

  desc "Run Release Build for TestingSamples Android App"
  lane :generate_rls do
    aab_dir = "../ui/espresso/BasicSample/app/build/outputs/bundle/release"
    signed_aab_file = "../ui/espresso/BasicSample/app/build/outputs/bundle/release/app-release"

    apk_dir = "../ui/espresso/BasicSample/app/build/outputs/apk/release"
    signed_apk_file = "../ui/espresso/BasicSample/app/build/outputs/apk/release/app-release-signed"

    #Cleanup old apk/abb
    sh("ls -al ../ui/espresso/BasicSample/app/build/outputs/bundle/release ||:")
    sh("rm -f #{signed_aab_file}.aab ||:")
    sh("rm -f #{signed_apk_file}.apk ||:")

    # JENKINSfile for RLS env vars
    # APPCENTER_TOKEN_DLO = credentials('s.appcenterduncwa_full')
    # KEYSTOREFILE = credentials('s.android_playstore_store_file')
    # KEYSTOREPASSWORD = credentials('s.android_playstore_pwd')
    # KEYSTOREALIAS = credentials('s.android_playstore_alias')

    android_playstore_file =  "/Users/cicdbuild/cicdgit/creds/aos/upload-keystore.jks"
    android_playstore_pwd = ENV["KEYSTOREPASSWORD"]
    android_playstore_alias = "upload"
    android_home = ENV["ANDROID_HOME"]
    #sh("printenv")
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: 'ui/espresso/BasicSample',
      print_command: false,
      print_command_output: false,
      properties: {
        "android.injected.signing.store.file" => android_playstore_file,
        "android.injected.signing.store.password" => android_playstore_pwd,
        "android.injected.signing.key.alias" => android_playstore_alias,
        "android.injected.signing.key.password" => android_playstore_pwd,
      }
    )
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: 'ui/espresso/BasicSample',
      print_command: false,
      print_command_output: false,
      properties: {
        "android.injected.signing.store.file" => android_playstore_file,
        "android.injected.signing.store.password" => android_playstore_pwd,
        "android.injected.signing.key.alias" => android_playstore_alias,
        "android.injected.signing.key.password" => android_playstore_pwd,
      }
    )

    flavor = ENV["FLAVOR"]

    keystore_path = "/Users/cicdbuild/cicdgit/creds/aos/upload-keystore.jks"
    #aab_file = "../ui/espresso/BasicSample/app/build/outputs/bundle/release/app-release.aab"
    apk_file = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    aab_file = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    sigalgo = "SHA256withRSA" #MD5withRSA # SHA256withRSA
    digestalgo = "SHA-256" #SHA1 # SHA-256

    ###sh("zip -d #{apk_file} META-INF/\*.RSA META-INF/\*.SF META/\*.MF ||:")

    # sh('jarsigner -verbose -sigalg $sigalgo -digestalg $digestalgo -keystore $android_playstore_file -storepass $android_playstore_pwd -keypass $android_playstore_pwd $aab_file $android_playstore_alias')
    # sh('jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore $(KeyStoreFile.secureFilePath) -storepass $(StorePassword) -keypass $(KeyPassword) $(system.defaultworkingdirectory)/app/build/outputs/bundle/release/app-release.aab $(KeyStoreAlias)')
    ###sh('jarsigner -verbose -sigalg \"$sigalgo\" -digestalg \"$digestalgo\" -keystore $keystore_path -storepass \"$android_playstore_pwd\" -keypass \"$android_playstore_pwd\" \"$aab_file\" $android_playstore_alias')

    ###zipalign = "#{android_home}/build-tools/30.0.2/zipalign" #APK Only
    ###apksigner = "#{android_home}/build-tools/30.0.2/apksigner" #APK Only

    ###sh("#{zipalign} -v 4 #{apk_file}") #APK_ONLY
    ###sh("#{apksigner} sign --v1-signing-enabled true --ks #{keystore_path} --ks-pass pass:#{android_playstore_pwd} #{apk_file}")
    ###sh("#{apksigner} verify  #{apk_file}")
    appcenter_upload_rls
    upload_rls
    github_upload_rls
  end

  desc "Upload AAB files to Google Play Store"
  lane :upload_rls do
    json_key = '/Users/cicdbuild/cicdgit/creds/aos/GooglePlayAPIKey/779267752917-17fdaa8426c9.json'
    aab_file = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    apk_file = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    mapping_files = lane_context[SharedValues::GRADLE_ALL_MAPPING_TXT_OUTPUT_PATHS]
    upload_to_play_store(
      aab: aab_file,
      apk: apk_file,
      version_name: "1.5", #overrides buld.gradle setting in versionName
      version_code: 2,
      mapping: mapping_files,
      release_status: 'draft',
      track: 'internal',
      json_key: json_key
    )
  end

  desc "Upload apk results to AppCenter"
  lane :github_upload_rls do |options|
    build_id = ENV['BUILD_NUM']
    sh("mv ../ui/espresso/BasicSample/app/build/outputs/apk/release/app-release.apk app-release.apk")
    sh("mv ../ui/espresso/BasicSample/app/build/outputs/bundle/release/app-release.aab app-release.aab")
    sh("git add app-release.apk")
    sh("git add app-release.aab")
    sh('git commit -m "AAB and APK Uploaded new release" ')
    sh('git tag Build-${BUILD_NUM}')
    sh('git push --tags')
  end

  ##################################################
  #  AOS PRA and QE Lanes
  ##################################################

  desc "Run linter for TestingSamples Android App"
  lane :test_aos_coverage do
    gradle(
      task: "createDebugCoverageReport",
      project_dir: 'ui/espresso/BasicSample'
    )
  end

  desc "Run linter for TestingSamples Android App"
  lane :test_aos_lint do
    gradle(
      task: "lint",
      project_dir: 'ui/espresso/BasicSample'
    )
  end

  desc "Run unit tests for TestingSamples Android App"
  lane :test_aos_pra do
    gradle(
      task: "testDebugUnitTest",
      project_dir: 'ui/espresso/BasicSample'
    )
  end

  desc "Run Unit Tests and UI Tests for TestingSamples and upload results to JIRA"
  lane :test_aos_qe_jira do
    gradle(
      task: "connectedAndroidTest",
      project_dir: 'ui/espresso/BasicSample'
    )
    sh './gradlew testDebugUnitTest | xcpretty -r junit'
    sh 'curl -H "Content-Type: multipart/form-data" -u duncwa:"password" -F "file=@build/reports/junit.xml" http://jira-prod.local:8081/rest/raven/2.0/import/execution/junit?projectKey=GHFLS-2'
  end

  desc "Run unit tests for BasicSample Android App"
  lane :test_aos_qe_basic do
    test_task = ENV['TEST_TASK']
    gradle(
      task: test_task,
      project_dir: "ui/espresso/BasicSample"
    )
  end

  desc "Run emulator instrumentation tests for TestingSamples Android App"
  lane :test_aos_qe_instrumentation do
    test_task = ENV['TEST_TASK']
    project_dir = ENV['PROJECT_DIR']
    sleep 90
    gradle(
      task: test_task,
      project_dir: "ui/espresso/BasicSample"
    )
    gradle(
      task: "createDebugCoverageReport",
      project_dir: "ui/espresso/BasicSample"
    )
    shutdown_emulator
  end

  desc "Run unit tests for any TestingSamples Android App"
  lane :test_aos_qe_varies do
    test_task = ENV['TEST_TASK']
    project_dir = ENV['PROJECT_DIR']
    gradle(
      task: test_task,
      project_dir: project_dir
    )
  end

  desc "Startup the emulator"
  lane :setup_emulator do
    android_home = ENV['ANDROID_HOME']
    device = ENV['DEVICE']
    adb(
      serial: device,
      command: "kill-server"
    )
    puts android_home
    sh("#{android_home}/platform-tools/adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill;done;sleep 5")
    sh("#{android_home}/platform-tools/adb start-server")
    sh("#{android_home}/emulator/emulator -list-avds")
    #sh("#{android_home}/emulator/emulator -avd #{device} -no-boot-anim -verbose -quit-after-boot 270")
    sh("#{android_home}/emulator/emulator -avd #{device} -memory 4096 -wipe-data -no-snapshot -no-boot-anim -verbose -gpu auto")
    #sh("#{android_home}/emulator/emulator -avd #{device} -wipe-data -no-snapshot -no-boot-anim -verbose")
  end

  desc "Shutdown the emulator"
  lane :shutdown_emulator do
    android_home = ENV['ANDROID_HOME']
    device = ENV['DEVICE']
    sh("#{android_home}/emulator/emulator", "-list-avds")
    sh("#{android_home}/platform-tools/adb devices | grep emulator | cut -f1 | while read line; do #{android_home}/platform-tools/adb -s $line emu kill;done")
    adb(
      serial: device,
      command: "kill-server"
    )
  end

  ##################################################
  #  AOS INS, Screenshots and Danger Lanes
  ##################################################

  desc "Perform Inspection of Artifacts using Bulkextractor"
  lane :bex_aos_ins do
    generate_rls_apk
    ## Call inspection bulkextractor on *.apk/abb and dSYMS file
    sh 'echo $PWD'
    sh 'echo "Running Bulkextractor inspection"'
    sh 'mkdir build'
    sh 'bulk_extractor -o build/output-apk -R ../ui/espresso/BasicSample/app/build/outputs/apk/release/app-release-unsigned.apk'
    # sh 'bulk_extractor -o build/output-apk -R ../ui/espresso/BasicSample/app/build/outputs/apk/release/app-release-unsigned.abb'
  end

  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    gradle(
      task: 'clean'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'Debug',
      project_dir: '.'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest',
      project_dir: '.'
    )
  end

  desc "Run Danger for PRA Commit to Repo Comments"
  lane :aos_danger do
    danger(
      use_bundle_exec: true,
      verbose: true,
      danger_id: "aos_dangerfile",
      new_comment: false,
      dangerfile: "fastlane/aos_dangerfile"
    )
  end

  desc "Run Danger for MBP PRA Commit to Repo Comments"
  lane :aos_danger_mbp do
    danger(
      use_bundle_exec: true,
      verbose: true,
      danger_id: "aos_dangerfile_mbp",
      new_comment: false,
      dangerfile: "fastlane/aos_dangerfile_mbp"
    )
  end

  ##################################################
  #  AOS Slack Lanes
  ##################################################

  desc "Run Slack reporting for DEV"
  lane :post_dev_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    appcenter_url = ENV["APPCENTER_DEV_APP_URL"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    success = status == "SUCCESS" ? true : false
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{appcenter_url}|#{'AppCenter Results'}>*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: success,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for PRA"
  lane :post_pra_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    pr_url = ENV["PR_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    pr_url = ENV["PR_URL"]
    pull_req_num = ENV["PR_NUM"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    success = status == "SUCCESS" ? true : false
    message = "*#{status} <#{pr_url}|PR-#{pull_req_num}> - - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/ui/espresso/BasicSample/app/build/reports/tests/testDebugUnitTest/index.html'}|#{'Results'}> *"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      success: success,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for QE Connected"
  lane :post_qe_aos_con_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    pwd = ENV["PWD"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    android_project = ENV["ANDROID_PROJECT"]
    test_task = ENV["TEST_TASK"]
    # result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    # message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"

    # XML parsing
    #output_xml = "#{pwd}/ui/espresso/BasicSample/app/build/test-results/testDebugUnitTest/TEST-com.example.android.testing.espresso.BasicSample.ChangeTextBehaviorLocalTest.xml"
    output_xml = "#{pwd}/ui/espresso/BasicSample/app/build/outputs/androidTest-results/connected/TEST-Pixel_4_XL_API_30(AVD)\ -\ 11-app-.xml"
    document = File.open(output_xml) { |f| Nokogiri::XML(f) }
    # document = Nokogiri::XML(File.open(output_xml))
    puts "Document : #{document}"
    all_tests = nil
    retry_tests = nil
    succeeded_tests = 0
    percent_tests = 0

    begin
      all_tests = document.at_xpath("/*/@tests") != nil ? document.at_xpath("/*/@tests").value.to_i : 0
      puts "====================== tests in testsuites : #{all_tests}"

      failures = document.at_xpath("/*/@failures") != nil ? document.at_xpath("/*/@failures").value.to_i : 0
      puts "====================== failures in testsuites : #{failures}"

      retries = document.at_xpath("/*/@retries") != nil ? document.at_xpath("/*/@retries").value.to_i : 0
      puts "====================== retries in testsuites : #{retries}"

      succeeded_tests = all_tests - failures

      puts "succeeded_tests : #{succeeded_tests}"

      if failures == 0
        success = true
        currentbuild_results = "SUCCESS"
        tests_summary = all_tests == 1 ? " #{all_tests} test was successful.  Build Succeeded." : "#{succeeded_tests} successful tests.  Build Succeeded."
        tests_summary = all_tests == 0 ? " Zero tests succeeded.  Build Succeeded." : tests_summary
        puts "===================tests_summary : #{tests_summary}"
        percent_passed = (succeeded_tests.to_f / all_tests) * 100.0
        puts "===================percent_passed : #{percent_passed}"

        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
        puts "===================retry_summary : #{retry_summary}"

      end

      if failures >= 1
        success = false
        currentbuild_results = "UNSTABLE"
        tests_summary = " #{failures} test(s) failed and #{succeeded_tests} test(s) succeeded.  Build Succeeded."
        percent_passed = (succeeded_tests.to_f / all_tests) * 100.0
        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
      end
    rescue StandardError => e
      UI.important("Failed to extract tests from \"#{output_xml}\: #{e}")
      tests_summary = "Error unable to locate tests summary data."
    end

    if success
      message = [
        "ð  <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ð ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`â  Android Task: #{test_task}`*",
        "*`â  Android Project Build: #{android_project}`*",
        "*`â  Android Module Build: BasicSample`*",
        "`<#{build_url}artifact/ui/espresso/BasicSample/app/build/reports/androidTests/connected/index.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    else
      begin
        failure_count = document.xpath("//testsuite//failures")
      rescue StandardError => e
        UI.error("Failed to load publish status.")
        tests_summary = "Check earlier errors preventing tests from running."
      end

      qe_build_succeeded = true
      qe_result = qe_build_succeeded
      emoji = ->(value) { value ? "â " : "â " }

      message = [
        "ð£ð¥ <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ð£ð¥ ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`#{emoji.call(qe_build_succeeded)} Android Task: #{test_task}`*",
        "*`#{emoji.call(qe_build_succeeded)} Android Project Build: #{android_project}`*",
        "*`#{emoji.call(qe_build_succeeded)} Android Module Build: BasicSample`*",
        "`<#{build_url}artifact/ui/espresso/BasicSample/app/build/reports/androidTests/connected/index.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    end

    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      pretext: "AOS QE Test Job Summary",
      success: success,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for QE TestDebug"
  lane :post_qe_aos_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    pwd = ENV["PWD"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    android_project = ENV["ANDROID_PROJECT"]
    test_task = ENV["TEST_TASK"]
    project_dir = ENV['PROJECT_DIR']
    # result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    # message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"

    # XML parsing
    output_xml = "#{pwd}/ui/espresso/BasicSample/app/build/test-results/testDebugUnitTest/TEST-com.dw4workonly.android.testing.espresso.BasicSample.ChangeTextBehaviorLocalTest.xml"
    document = File.open(output_xml) { |f| Nokogiri::XML(f) }
    # document = Nokogiri::XML(File.open(output_xml))
    puts "Document : #{document}"
    all_tests = nil
    retry_tests = nil
    succeeded_tests = 0
    percent_tests = 0

    begin
      all_tests = document.at_xpath("/*/@tests") != nil ? document.at_xpath("/*/@tests").value.to_i : 0
      puts "====================== tests in testsuites : #{all_tests}"

      failures = document.at_xpath("/*/@failures") != nil ? document.at_xpath("/*/@failures").value.to_i : 0
      puts "====================== failures in testsuites : #{failures}"

      retries = document.at_xpath("/*/@retries") != nil ? document.at_xpath("/*/@retries").value.to_i : 0
      puts "====================== retries in testsuites : #{retries}"

      succeeded_tests = all_tests - failures

      puts "succeeded_tests : #{succeeded_tests}"

      if failures == 0
        success = true
        currentbuild_results = "SUCCESS"
        tests_summary = all_tests == 1 ? " #{all_tests} test was successful.  Build Succeeded." : "#{succeeded_tests} successful tests.  Build Succeeded."
        tests_summary = all_tests == 0 ? " Zero tests succeeded.  Build Succeeded." : tests_summary
        puts "===================tests_summary : #{tests_summary}"
        percent_passed = (succeeded_tests.to_f / all_tests) * 100.0
        puts "===================percent_passed : #{percent_passed}"

        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
        puts "===================retry_summary : #{retry_summary}"

      end

      if failures >= 1
        success = false
        currentbuild_results = "UNSTABLE"
        tests_summary = " #{failures} test(s) failed and #{succeeded_tests} test(s) succeeded.  Build Succeeded."
        percent_passed = (succeeded_tests.to_f / all_tests) * 100.0
        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
      end
    rescue StandardError => e
      UI.important("Failed to extract tests from \"#{output_xml}\: #{e}")
      tests_summary = "Error unable to locate tests summary data."
    end

    if success
      message = [
        "ð  <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ð ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`â  Android Task: #{test_task}`*",
        "*`â  Android Project Build: #{android_project}`*",
        "`<#{build_url}artifact/ui/espresso/BasicSample/app/build/reports/tests/testDebugUnitTest/index.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    else
      begin
        failure_count = document.xpath("//testsuite//failures")
      rescue StandardError => e
        UI.error("Failed to load publish status.")
        tests_summary = "Check earlier errors preventing tests from running."
      end

      qe_build_succeeded = true
      qe_result = qe_build_succeeded
      emoji = ->(value) { value ? "â " : "â " }

      message = [
        "ð£ð¥ <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ð£ð¥ ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`#{emoji.call(qe_build_succeeded)} Android Task: #{test_task}`*",
        "*`#{emoji.call(qe_build_succeeded)} Android Project Build: #{android_project}`*",
        "`<#{build_url}artifact/ui/espresso/BasicSample/app/build/reports/tests/testDebugUnitTest/index.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    end

    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      pretext: "AOS QE Test Job Summary",
      success: success,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for RLS"
  lane :post_rls_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    appcenter_url = ENV["APPCENTER_RLS_APP_URL"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    success = status == "SUCCESS" ? true : false
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{appcenter_url}|#{'AppCenter Results'}>*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: success,
      default_payloads: []
    )
  end

  desc "Run Slack Testing"
  lane :slack_test do
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = "1"
    run_time = to_clock(4200)
    status = "SUCCESS"
    result = status == "SUCCESS" ? " ð finished in" : " ð£ð¥failed after "
    success = status == "SUCCESS" ? true : false
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: success,
      default_payloads: []
    )
  end
end
